from PassengerCar import PassengerCar
from Truck import Truck
"""
Каждый класс реализовать в отдельном модуле, импортируя их в производные модули.
Создать класс Car с полями марка, мощность, год производства. Добавить конструктор класса.
Создать производный от Car класс PassengerCar. Новые поля: количество пассажиров, ремонтная книжка
    (словарь вида запчасти: год замены). Определить конструктор, с вызовом родительского конструктора.
    Определить функции добавления замененной запчасти в ремонтную книжку, получения год замены по названию,
    форматированной печати всей ремонтной книжки. Переопределить метод преобразования в строку для печати
    основной информации (марка, мощность, год производства, количество пассажиров).
Создать производный от Car класс Truck. Новые поля: максимальная грузоподъемность, ФИ водителя, текущий груз
    (словарь вида название товара: вес). Определить конструктор, с вызовом родительского конструктора.
    Определить функции изменения водителя, добавления и удаления груза, форматированной печати текущего груза.
    Переопределить метод преобразования в строку для печати основной информации (марка, мощность, год производства,
    максимальная грузоподъемность, ФИ водителя).
Создать класс Autopark. Поля: название автопарка, список легковых машин (список экземпляров класса PassengerCar),
    список грузовиков (список экземпляров класса Truck). Определить конструктор. Переопределить метод
    преобразования в строку для печати всей информации об автопарке (с использованием переопределения в классах
    PassengerCar и Truck). Переопределить методы получения количества грузовиков функцией len, получения грузовой
    машины по индексу, изменения по индексу, удаления по индексу (пусть номера у грузовых машин считаются с 1,
    а индекс 0 – список всех легковых машин). Переопределить операции + и - для добавления или удаления грузовой
    машины. Добавить функцию создания txt-файла и записи всей информации в него (в том числе ремонтных
    книжек и списка грузов).
Предусмотреть хотя бы в 3 местах обработку возможных исключений.
В каждом модуле провести подробное тестирование всех создаваемых объектов и функций.
"""
class Authopark():
    title = ""
    PassengerCars = [PassengerCar(), PassengerCar(), PassengerCar()]
    Trucks = [Truck(), Truck(), Truck()]

    def __init__(self, title):
        self.title = title
    
    def __str__(self):
        return PassengerCar().__str__() +"\n"+ Truck().__str__()

    def __len__(self):
        return len(self.Trucks)

    def __getitem__(self, key):
        return self.Trucks[key]

    def __setitem__(self, key, value):
        self.Trucks[key] = value

    def __delitem__(self, key):
        del self.Trucks[key+1]
        del self.PassengerCars[key]

    def __add__(self, other):
        self.PassengerCars.append(other)
        return len(self.PassengerCars)

    def __sub__(self, other):
        self.PassengerCars.pop(len(self.PassengerCars)-1)
        return len(self.PassengerCars)

    def print_file(self):
        Authopark_file = open("Authopark.txt", "w")
        Authopark_file.write(PassengerCar().__str__() + "\n" + Truck().__str__())
        

A = Authopark("Дворовый автопарк")
B = Authopark("Дворовый автопарк")
print(A)
print(len(A))
print(A[0])
A[0] = A[1]
del A[0]
print(len(A))
print(A + B)
print(A - B)
print(len(A))
A.print_file()